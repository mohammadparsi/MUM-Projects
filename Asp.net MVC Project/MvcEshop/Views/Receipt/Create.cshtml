@model MvcEshop.ViewModels.Receipt.CreateViewModel

@{
    ViewBag.Title = Resources.DisplayNames.Add + " " + Resources.DisplayNames.Receipt;
    ViewBag.LayoutType = "DataEntryForm";
}


@using (Html.BeginForm("Create", "Receipt", FormMethod.Post, new { encType = "multipart/form-data", @id = "frmForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <div class="validationMessage">
            @Html.ValidationSummary(true)
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.AccountId, new { @class = "control-label col-md-2" })
                <div class="inputControlWrapper">
                    @Html.DropDownList("AccountId", Resources.DisplayNames.Select)
                    <div class="validationMessage">
                        @Html.ValidationMessageFor(model => model.AccountId)
                    </div>
                </div>
            </div>*@

        <div class="form-group">
            @Html.Label(Resources.DisplayNames.AddCreditApproach, new { @class = "control-label col-md-2" })
            <div class="inputControlWrapper">
                <div class="container">
                    <div class="radio col-md-2 col-sm-2 col-xs-3">
                        <label>
                            @*<input id="optUpload" type="radio" name="optradio">@Resources.DisplayNames.Upload*@
                            @Html.RadioButtonFor(model => model.GiveCreditApproach, @Resources.DisplayNames.Free, new { @id = "optFree", @checked = "checked" })
                            @Resources.DisplayNames.Free
                        </label>
                    </div>
                    <div class="radio col-md-2 col-sm-4 col-xs-6">
                        <label>
                            @*<input id="optPaste" type="radio" name="optradio">@Resources.DisplayNames.TextForDocumentFinding*@
                            @Html.RadioButtonFor(model => model.GiveCreditApproach, @Resources.DisplayNames.BasedOnTariff, new { @id = "optBasedOnTariff" })
                            @Resources.DisplayNames.BasedOnTariff
                        </label>
                    </div>
                </div>


            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AllocatedVolume, new { @class = "control-label col-md-2" })
            <div class="inputControlWrapper">
                @Html.EditorFor(model => model.AllocatedVolume)
                <div class="validationMessage">
                    @Html.ValidationMessage("AllocatedVolume")
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ExpirationDate, new { @class = "control-label col-md-2" })
            <div class="inputControlWrapper">
                @Html.TextBoxFor(model => model.ExpirationDate, new { @class = "datePicker" })
                <div class="validationMessage">
                    @Html.ValidationMessage("ExpirationDateRequired")
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-3">
                @Html.EditorFor(model => model.MustSearchInIrandoc)
                @Html.LabelFor(model => model.MustSearchInIrandoc)
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-3">
                @Html.EditorFor(model => model.MustSearchInInternet)
                @Html.LabelFor(model => model.MustSearchInInternet)
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-3">
                <div class="validationMessage">
                    @Html.ValidationMessage("ChooseAtLeastOneItem")
                </div>
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.PaidAmountInRial, new { @class = "control-label col-md-2" })
            <div class="inputControlWrapper">
                @Html.TextBoxFor(model => model.PaidAmountInRial)
                <div class="validationMessage">
                    @Html.ValidationMessage("PaidAmountInRial")
                </div>
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.PaymentDate, new { @class = "control-label col-md-2" })
            <div class="inputControlWrapper">
                @Html.TextBoxFor(model => model.PaymentDate, new { @class = "datePicker" })
                <div class="validationMessage">
                    @Html.ValidationMessage("PaymentDateRequired")
                </div>
            </div>
        </div>

        

        
        <div class="form-group">
            @Html.LabelFor(model => model.ImageFile, htmlAttributes: new { @class = "control-label col-md-2" })

            <div class="inputControlWrapper">
                <div class="fileUploaderWrapper col-md-4 col-sm-11 col-xs-5">
                    @*@Html.EditorFor(model => model.PaperFile, new { htmlAttributes = new { @class = "form-control" } })*@
                    <input id="ImageFile" name="ImageFile" type="file" class="filestyle" style="margin-right:0px;" data-buttontext="انتخاب" accept=".bmp,.dib,.jpg,.jpeg,.jpe,.jfif,.gif,.tif,.tiff,.png">
                    @*<div style="text-align:right; direction:rtl;"><input type="file" class="filestyle" data-buttontext="Find file"></div>*@
                    @*<span class="btn btn-upload btn-file">
                            انتخاب
                            <input type="file" accept=".bmp,.dib,.jpg,.jpeg,.jpe,.jfif,.gif,.tif,.tiff,.png">
                        </span>*@
                    @*@Html.Kendo().Upload().Name("ImageFile").Multiple(false).HtmlAttributes(new { @accept = ".bmp,.dib,.jpg,.jpeg,.jpe,.jfif,.gif,.tif,.tiff,.png" })*@
                    @*<div class="validationMessage">
                            @Html.ValidationMessageFor(model => model.ImageFile, "", new { @class = "text-danger" })
                        </div>*@
                </div>
                <div class="col-md-8 col-sm-4"></div>

            </div>

        </div>

        <div class="form-group">
            <label class="control-label"></label>

            <div class="inputControlWrapper">
                <div class="validationMessage">@Html.ValidationMessage("ImageFile")</div>
            </div>
        </div>

        <div class="form-group" id="buttons">
            <div class="FormButtonControlWrapper">
                @{ Guid? guidAccountId = ViewBag.AccountId;
                }
                <input type="submit" value="تأیید" class="submit" />
                @Html.ActionLink(Resources.DisplayNames.ReturnTo + " " + Resources.DisplayNames.List, MVC.Receipt.Index(guidAccountId))
            </div>
        </div>
    </div>
}

@section scripts
{


    @Html.Partial("_Partial_DatePicker", 0)

    @*<link href="~/Content/PersianUploader.css" rel="stylesheet" />*@
    <script src="~/Scripts/bootstrap-filestyle.min.js"></script>

    <script type="text/javascript">
        $(document).ready(function () {

            //removing client-side validation
            //$("#PaidAmountInRial [data-val]").attr("data-val", false);

            //$('#frmForm').removeData('unobtrusiveValidation');
            //$('#frmForm').removeData('validator');
            //$.validator.unobtrusive.parse('#frmForm');


            //set different elements based on the value of the property "TextSendingApproach" of the Model.

            @if (Model.GiveCreditApproach == @Resources.DisplayNames.Free)
            {
                <text>
            $("#AllocatedVolume").prop('disabled', false);
            $("#ImageFile").prop('disabled', true);
            $("#PaidAmountInRial").prop('disabled', true);
            $("#PaymentDate").prop('disabled', true);
            //$("#PaperTitle").prop('disabled', true);
            </text>
        }

            @if (Model.GiveCreditApproach == @Resources.DisplayNames.BasedOnTariff)
            {
                <text>
            $("#AllocatedVolume").prop('disabled', true);
            $("#ImageFile").prop('disabled', false);
            $("#PaidAmountInRial").prop('disabled', false);
            $("#PaymentDate").prop('disabled', false);
            //$("#PaperTitle").prop('disabled', false);
            </text>
            }

            //set elements based on user-click
            $("#optFree").change(function () {
                $("#AllocatedVolume").prop('disabled', false);
                $("#ImageFile").prop('disabled', true);
                $("#PaidAmountInRial").prop('disabled', true);
                $("#PaymentDate").prop('disabled', true);

                //removing client-side validation
                //$("#PaidAmountInRial [data-val]").attr("data-val", false);

                //$('#frmForm').removeData('unobtrusiveValidation');
                //$('#frmForm').removeData('validator');
                //$.validator.unobtrusive.parse('#frmForm');
                //$("#PaperTitle").prop('disabled', false);
            });

            $("#optBasedOnTariff").change(function () {
                $("#AllocatedVolume").prop('disabled', true);
                $("#ImageFile").prop('disabled', false);
                $("#PaidAmountInRial").prop('disabled', false);
                $("#PaymentDate").prop('disabled', false);
                //$("#PaperTitle").prop('disabled', true);
            });

            ////show divProgress if user would click on submit button
            //$("#frmSubmit").submit(function (event) {
            //    $("#divProgress").removeClass("hidden");
            //});


        });

    </script>
}

