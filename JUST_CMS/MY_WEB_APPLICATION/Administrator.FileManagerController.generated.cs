// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace MY_WEB_APPLICATION.Areas.Administrator.Controllers
{
    public partial class FileManagerController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected FileManagerController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.FileResult Download()
        {
            return new T4MVC_System_Web_Mvc_FileResult(Area, Name, ActionNames.Download);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult Delete()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.Delete);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult Rename()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.Rename);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult CreateFolder()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.CreateFolder);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult UploadFile()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.UploadFile);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public FileManagerController Actions { get { return MVC.Administrator.FileManager; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Administrator";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "FileManager";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "FileManager";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string List = "List";
            public readonly string Download = "Download";
            public readonly string Delete = "Delete";
            public readonly string Rename = "Rename";
            public readonly string CreateFolder = "CreateFolder";
            public readonly string UploadFile = "UploadFile";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string List = "List";
            public const string Download = "Download";
            public const string Delete = "Delete";
            public const string Rename = "Rename";
            public const string CreateFolder = "CreateFolder";
            public const string UploadFile = "UploadFile";
        }


        static readonly ActionParamsClass_List s_params_List = new ActionParamsClass_List();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_List ListParams { get { return s_params_List; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_List
        {
            public readonly string rootRelativePath = "rootRelativePath";
        }
        static readonly ActionParamsClass_Download s_params_Download = new ActionParamsClass_Download();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Download DownloadParams { get { return s_params_Download; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Download
        {
            public readonly string rootRelativePathName = "rootRelativePathName";
        }
        static readonly ActionParamsClass_Delete s_params_Delete = new ActionParamsClass_Delete();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Delete DeleteParams { get { return s_params_Delete; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Delete
        {
            public readonly string rootRelativePath = "rootRelativePath";
            public readonly string myArray = "myArray";
        }
        static readonly ActionParamsClass_Rename s_params_Rename = new ActionParamsClass_Rename();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Rename RenameParams { get { return s_params_Rename; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Rename
        {
            public readonly string rootRelativePath = "rootRelativePath";
            public readonly string oldName = "oldName";
            public readonly string newName = "newName";
        }
        static readonly ActionParamsClass_CreateFolder s_params_CreateFolder = new ActionParamsClass_CreateFolder();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CreateFolder CreateFolderParams { get { return s_params_CreateFolder; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CreateFolder
        {
            public readonly string rootRelativePath = "rootRelativePath";
            public readonly string folderName = "folderName";
        }
        static readonly ActionParamsClass_UploadFile s_params_UploadFile = new ActionParamsClass_UploadFile();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UploadFile UploadFileParams { get { return s_params_UploadFile; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UploadFile
        {
            public readonly string rootRelativePath = "rootRelativePath";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string List = "List";
            }
            public readonly string List = "~/Areas/Administrator/Views/FileManager/List.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_FileManagerController : MY_WEB_APPLICATION.Areas.Administrator.Controllers.FileManagerController
    {
        public T4MVC_FileManagerController() : base(Dummy.Instance) { }

        [NonAction]
        partial void ListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string rootRelativePath);

        [NonAction]
        public override System.Web.Mvc.ActionResult List(string rootRelativePath)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.List);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "rootRelativePath", rootRelativePath);
            ListOverride(callInfo, rootRelativePath);
            return callInfo;
        }

        [NonAction]
        partial void DownloadOverride(T4MVC_System_Web_Mvc_FileResult callInfo, string rootRelativePathName);

        [NonAction]
        public override System.Web.Mvc.FileResult Download(string rootRelativePathName)
        {
            var callInfo = new T4MVC_System_Web_Mvc_FileResult(Area, Name, ActionNames.Download);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "rootRelativePathName", rootRelativePathName);
            DownloadOverride(callInfo, rootRelativePathName);
            return callInfo;
        }

        [NonAction]
        partial void DeleteOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string rootRelativePath, string myArray);

        [NonAction]
        public override System.Web.Mvc.JsonResult Delete(string rootRelativePath, string myArray)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.Delete);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "rootRelativePath", rootRelativePath);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "myArray", myArray);
            DeleteOverride(callInfo, rootRelativePath, myArray);
            return callInfo;
        }

        [NonAction]
        partial void RenameOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string rootRelativePath, string oldName, string newName);

        [NonAction]
        public override System.Web.Mvc.JsonResult Rename(string rootRelativePath, string oldName, string newName)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.Rename);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "rootRelativePath", rootRelativePath);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "oldName", oldName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "newName", newName);
            RenameOverride(callInfo, rootRelativePath, oldName, newName);
            return callInfo;
        }

        [NonAction]
        partial void CreateFolderOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string rootRelativePath, string folderName);

        [NonAction]
        public override System.Web.Mvc.JsonResult CreateFolder(string rootRelativePath, string folderName)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.CreateFolder);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "rootRelativePath", rootRelativePath);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "folderName", folderName);
            CreateFolderOverride(callInfo, rootRelativePath, folderName);
            return callInfo;
        }

        [NonAction]
        partial void UploadFileOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string rootRelativePath);

        [NonAction]
        public override System.Web.Mvc.JsonResult UploadFile(string rootRelativePath)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.UploadFile);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "rootRelativePath", rootRelativePath);
            UploadFileOverride(callInfo, rootRelativePath);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591
