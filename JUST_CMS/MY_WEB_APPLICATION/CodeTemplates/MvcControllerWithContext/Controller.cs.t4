<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#
var routePrefix = String.Empty;
if (!String.IsNullOrWhiteSpace(AreaName))
{
	routePrefix = "/" + AreaName;
}
routePrefix += "/" + ControllerRootName + "/";
#>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="AreaName" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Boolean" name="IsOverpostingProtectionRequired" #>
<#@ parameter type="System.String" name="BindAttributeIncludeText" #>
<#@ parameter type="System.String" name ="OverpostingWarningMessage" #>
<#@ parameter type="System.Collections.Generic.HashSet<System.String>" name="RequiredNamespaces" #>
using System.Linq;
using System.Data.Entity;
<#
	var modelNamespaceName = String.Empty;
	foreach(string strNamespaceName in RequiredNamespaces)
	{
		modelNamespaceName = strNamespaceName;
		break;
	}
#>

namespace <#= Namespace #>
{
<#
	var contextTypeName = ContextTypeName;
	var entitySetName = ModelMetadata.EntitySetName;
	var entitySetVariable = entitySetName.ToLowerInvariant();
	var primaryKeyName = ModelMetadata.PrimaryKeys[0].PropertyName;
	var primaryKeyShortTypeName = ModelMetadata.PrimaryKeys[0].ShortTypeName;
	var primaryKeyDefaultValue = ModelMetadata.PrimaryKeys[0].DefaultValue;
	var primaryKeyType = ModelMetadata.PrimaryKeys[0].TypeName;
	var primaryKeyNullableTypeName = GetNullableTypeName(primaryKeyType, primaryKeyShortTypeName);
	var lambdaVar = ModelVariable[0];
	var relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(item => item.AssociationPropertyName);

	string bindAttribute;

	if (IsOverpostingProtectionRequired)
	{
		bindAttribute = String.Format("[System.Web.Mvc.Bind(Include = \"{0}\")]", BindAttributeIncludeText);
	}
	else
	{
		bindAttribute = String.Empty;
	}

	var repositoryName = ModelTypeName + "Repository";
	if (string.IsNullOrEmpty(AreaName) == false)
	{
		repositoryName =
			AreaName + "UnitOfWork." + repositoryName;
	}
#>
	/// <summary>
	/// Version: 1.0.0
	/// Update Date: 1393//
	/// 
	/// </summary>
<#
	if (string.IsNullOrEmpty(AreaName))
	{
#>
	[Infrastructure.ProjectControllerPermission
		(isVisibleJustForProgrammer: false,
		keyName: Resources.Strings.ControllersKeys.<#= ControllerRootName #>)]
<#
	}
	else
	{
#>
	[Infrastructure.ProjectControllerPermission
		(isVisibleJustForProgrammer: false,
		keyName: Resources.Strings.ControllersKeys.<#= AreaName #>.<#= ControllerRootName #>)]
<#
	}
#>
	public partial class <#= ControllerName #> : Infrastructure.BaseControllerWithUnitOfWork
	{
		public <#= ControllerName #>()
		{
		}

		[System.Web.Mvc.HttpGet]
		[Infrastructure.ProjectActionPermission
			(isVisibleJustForProgrammer: false,
			accessType: Models.Enums.AccessTypes.Special,
			keyName: Resources.Strings.ActionsKeys.Index)]
		public virtual System.Web.Mvc.ActionResult Index()
		{
			var var<#= entitySetName #> =
				UnitOfWork.<#= repositoryName #>.Get()
				.Where(current => current.CultureLcid == CultureLcid)
				.OrderBy(current => current.Ordering)
				.ThenBy(current => current.Name)
				.ToList()
				;

			return (View(var<#= entitySetName #>));
		}

		[System.Web.Mvc.HttpGet]
		[Infrastructure.ProjectActionPermission
			(isVisibleJustForProgrammer: false,
			accessType: Models.Enums.AccessTypes.Special,
			keyName: Resources.Strings.ActionsKeys.Details)]
		public virtual System.Web.Mvc.ActionResult Details(System.<#= primaryKeyNullableTypeName #> id)
		{
			if (id.HasValue == false)
			{
				return (RedirectToAction
					(MVC.Error.Display(System.Net.HttpStatusCode.BadRequest)));
			}

			<#= modelNamespaceName #>.<#= ModelTypeName #> o<#= ModelTypeName #> =
				UnitOfWork.<#= repositoryName #>.Get()
				.Where(current => current.<#= primaryKeyName #> == id.Value)
				.FirstOrDefault();

			if (o<#= ModelTypeName #> == null)
			{
				return (RedirectToAction
					(MVC.Error.Display(System.Net.HttpStatusCode.NotFound)));
			}

			return (View(o<#= ModelTypeName #>));
		}

		[System.Web.Mvc.HttpGet]
		[Infrastructure.ProjectActionPermission
			(isVisibleJustForProgrammer: false,
			accessType: Models.Enums.AccessTypes.Special,
			keyName: Resources.Strings.ActionsKeys.Create)]
		public virtual System.Web.Mvc.ActionResult Create()
		{
			// **************************************************
			<#= modelNamespaceName #>.<#= ModelTypeName #> o<#= ModelTypeName #> =
				new <#= modelNamespaceName #>.<#= ModelTypeName #>();
			// **************************************************

<#
	foreach (var property in relatedProperties.Values)
	{
#>
			ViewBag.<#= property.ForeignKeyPropertyNames[0] #> =
				new SelectList(UnitOfWork.<#= property.EntitySetName #>, "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>");
<#
	}
#>
			return (View(o<#= ModelTypeName #>));
		}

		[System.Web.Mvc.HttpPost]
		[System.Web.Mvc.ValidateAntiForgeryToken]
		[Infrastructure.ProjectActionPermission
			(isVisibleJustForProgrammer: false,
			accessType: Models.Enums.AccessTypes.Special,
			keyName: Resources.Strings.ActionsKeys.Create)]
		public virtual System.Web.Mvc.ActionResult Create
			(<#= bindAttribute #>
			<#= modelNamespaceName #>.<#= ModelTypeName #> <#= ModelVariable #>)
		{
			// **************************************************
			<#= ModelVariable #>.InsertDateTime = Infrastructure.Utility.Now;
			<#= ModelVariable #>.UpdateDateTime = Infrastructure.Utility.Now;
			// **************************************************

			if (ModelState.IsValid)
			{
				UnitOfWork.<#= repositoryName #>.Insert(<#= ModelVariable #>);

				UnitOfWork.Save();

<#
	if (string.IsNullOrEmpty(AreaName))
	{
#>
				return (RedirectToAction(MVC.<#= ControllerRootName #>.Index()));
<#
	}
	else
	{
#>
				return (RedirectToAction(MVC.<#= AreaName #>.<#= ControllerRootName #>.Index()));
<#
	}
#>
			}

<#
	foreach (var property in relatedProperties.Values)
	{
#>
			ViewBag.<#= property.ForeignKeyPropertyNames[0] #> =
				new SelectList(UnitOfWork.<#= property.EntitySetName #>, "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>", <#= ModelVariable #>.<#= property.ForeignKeyPropertyNames[0] #>);
<#
	}
#>
			return (View(<#= ModelVariable #>));
		}

		[System.Web.Mvc.HttpGet]
		[Infrastructure.ProjectActionPermission
			(isVisibleJustForProgrammer: false,
			accessType: Models.Enums.AccessTypes.Special,
			keyName: Resources.Strings.ActionsKeys.Edit)]
		public virtual System.Web.Mvc.ActionResult Edit(System.<#= primaryKeyNullableTypeName #> id)
		{
			if (id.HasValue == false)
			{
				return (RedirectToAction
					(MVC.Error.Display(System.Net.HttpStatusCode.BadRequest)));
			}

			<#= modelNamespaceName #>.<#= ModelTypeName #> o<#= ModelTypeName #> =
				UnitOfWork.<#= repositoryName #>.Get()
				.Where(current => current.<#= primaryKeyName #> == id.Value)
				.FirstOrDefault();

			if (o<#= ModelTypeName #> == null)
			{
				return (RedirectToAction
					(MVC.Error.Display(System.Net.HttpStatusCode.NotFound)));
			}

<#
	foreach (var property in relatedProperties.Values)
	{
#>
			ViewBag.<#= property.ForeignKeyPropertyNames[0] #> =
				new SelectList(UnitOfWork.<#= property.EntitySetName #>, "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>", <#= ModelVariable #>.<#= property.ForeignKeyPropertyNames[0] #>);
<#
	}
#>
			return (View(o<#= ModelTypeName #>));
		}

		[System.Web.Mvc.HttpPost]
		[System.Web.Mvc.ValidateAntiForgeryToken]
		[Infrastructure.ProjectActionPermission
			(isVisibleJustForProgrammer: false,
			accessType: Models.Enums.AccessTypes.Special,
			keyName: Resources.Strings.ActionsKeys.Edit)]
		public virtual System.Web.Mvc.ActionResult Edit
			(<#= bindAttribute #>
			<#= modelNamespaceName #>.<#= ModelTypeName #> <#= ModelVariable #>)
		{
			<#= ModelVariable #>.UpdateDateTime = Infrastructure.Utility.Now;

			if (ModelState.IsValid)
			{
				UnitOfWork.<#= repositoryName #>.Update(<#= ModelVariable #>);

				UnitOfWork.Save();

<#
	if (string.IsNullOrEmpty(AreaName))
	{
#>
				return (RedirectToAction(MVC.<#= ControllerRootName #>.Index()));
<#
	}
	else
	{
#>
				return (RedirectToAction(MVC.<#= AreaName #>.<#= ControllerRootName #>.Index()));
<#
	}
#>
			}
<#
	foreach (var property in relatedProperties.Values)
	{
#>
			ViewBag.<#= property.ForeignKeyPropertyNames[0] #> =
				new SelectList(UnitOfWork.<#= property.EntitySetName #>, "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>", <#= ModelVariable #>.<#= property.ForeignKeyPropertyNames[0] #>);
<#
	}
#>

			return (View(<#= ModelVariable #>));
		}

		[System.Web.Mvc.HttpGet]
		[Infrastructure.ProjectActionPermission
			(isVisibleJustForProgrammer: false,
			accessType: Models.Enums.AccessTypes.Special,
			keyName: Resources.Strings.ActionsKeys.Delete)]
		public virtual System.Web.Mvc.ActionResult Delete(System.<#= primaryKeyNullableTypeName #> id)
		{
			if (id.HasValue == false)
			{
				return (RedirectToAction
					(MVC.Error.Display(System.Net.HttpStatusCode.BadRequest)));
			}

			<#= modelNamespaceName #>.<#= ModelTypeName #> o<#= ModelTypeName #> =
				UnitOfWork.<#= repositoryName #>.Get()
				.Where(current => current.<#= primaryKeyName #> == id.Value)
				.FirstOrDefault();

			if (o<#= ModelTypeName #> == null)
			{
				return (RedirectToAction
					(MVC.Error.Display(System.Net.HttpStatusCode.NotFound)));
			}

			return (View(o<#= ModelTypeName #>));
		}

		[System.Web.Mvc.HttpPost]
		[System.Web.Mvc.ActionName("Delete")]
		[System.Web.Mvc.ValidateAntiForgeryToken]
		[Infrastructure.ProjectActionPermission
			(isVisibleJustForProgrammer: false,
			accessType: Models.Enums.AccessTypes.Special,
			keyName: Resources.Strings.ActionsKeys.Delete)]
		public virtual System.Web.Mvc.ActionResult DeleteConfirmed(System.<#= primaryKeyShortTypeName #> id)
		{
			<#= modelNamespaceName #>.<#= ModelTypeName #> o<#= ModelTypeName #> =
				UnitOfWork.<#= repositoryName #>.Get()
				.Where(current => current.<#= primaryKeyName #> == id)
				.FirstOrDefault();

			if (o<#= ModelTypeName #> == null)
			{
				return (RedirectToAction
					(MVC.Error.Display(System.Net.HttpStatusCode.NotFound)));
			}

			UnitOfWork.<#= repositoryName #>.Delete(o<#= ModelTypeName #>);

			UnitOfWork.Save();

<#
	if (string.IsNullOrEmpty(AreaName))
	{
#>
			return (RedirectToAction(MVC.<#= ControllerRootName #>.Index()));
<#
	}
	else
	{
#>
			return (RedirectToAction(MVC.<#= AreaName #>.<#= ControllerRootName #>.Index()));
<#
	}
#>
		}
	}
}
<#+
// This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
// sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
	string GetNullableTypeName(string typeName, string shortTypeName)
	{
		// The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
		// In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
		Type primaryKeyType = null;
		try
		{
			primaryKeyType = Type.GetType(typeName);
		}
		catch
		{
		}

		if (primaryKeyType != null && (primaryKeyType.IsPrimitive || IsGuid(typeName)))
		{
			return (shortTypeName + "?");
		}

		return (shortTypeName);
	}

	bool IsGuid(string typeName)
	{
		return (String.Equals("System.Guid", typeName, StringComparison.OrdinalIgnoreCase));
	}
#>
